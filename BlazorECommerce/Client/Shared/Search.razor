@inject IProductService ProductService;
@inject NavigationManager NavigationManager;


<div class="input-group">
    <div class="form-outline" data-mdb-input-init>
        <input type="search" id="form1" class="form-control"  @bind-value="searchText"
            @bind-value:event="oninput"
            list="products"
            @onkeyup="HandleSearch"
            placeholder="Search..."
            @ref="searchInput"
    />
        <datalist id="products">
            @foreach (var suggestion in suggestions)
            {
                <option>
                    @suggestion
                </option>
            }

        </datalist>
        <label class="form-label" for="form1">Search</label>
    </div>
    <button type="button" class="btn btn-primary" data-mdb-ripple-init>
        <i class="fas fa-search"></i>
    </button>
</div>

@code {
    private string searchText = string.Empty;
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void SearchProducts()
    {
        NavigationManager.NavigateTo($"search/{searchText}/1");
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if(args.Key == null || args.Key.Equals("Enter"))
        {
            SearchProducts();
        } else if (searchText.Length > 1)
        {
            suggestions = await ProductService.GetProductSearchSuggestions(searchText);
        }
    }

}
