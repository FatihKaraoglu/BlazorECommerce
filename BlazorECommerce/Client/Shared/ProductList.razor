@using BlazorECommerce.Shared;
@inject IProductService ProductService
@inject NavigationManager NavigationManager

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
} else
{


}

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private string Parameter { get; set; }


    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;

    }

    public void OnDispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return "No Price";
        } else if (variants.Count == 1) 
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }

    private async Task ToggleSection()
    {
        await JSRuntime.InvokeVoidAsync("toggleSection");
    }

    private string GetParameterFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var parameter = uri.Segments.LastOrDefault(); // Assuming the parameter is the last segment of the URL
        return parameter;
    }

    public void NavigateToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }

}
