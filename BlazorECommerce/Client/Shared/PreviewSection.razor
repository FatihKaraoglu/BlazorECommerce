@inject IProductService ProductService
@inject IJSRuntime JSRuntime

<div class="preview-section">
    <div class="preview-navigation">
        <h4>@CurrentTabName</h4>
        <div class="tabs">
            <ul class="tab-list">
                <li @onclick='() => ChangeTab("Latest Releases")'>
                    <a>New Releases</a>
                </li>
                <li @onclick='() => ChangeTab("Featured")'>
                    <a>Featured</a>
                </li>
                <li @onclick='() => ChangeTab("Most Viewed")'>
                    <a>Most Viewed</a>
                </li>
            </ul>
        </div>
    </div>

    <div class="slick-carousel">
        @foreach (var product in ProductService.Products)
        {
            <div>
                @product.Title
            </div>
        }
    </div>

</div>



  @*  <section class="product">
        <button class="pre-btn" @onclick="ScrollLeft"><i class="bi bi-caret-left"></i></button>
        <button class="nxt-btn" @onclick="ScrollRight"><i class="bi bi-caret-right"></i></button>
        <div class="product-container" @ref="productContainer">
            @foreach (var product in ProductService.Products)
            {
                <div class="product-card">
                    <div class="product-image">
                        <span class="discount-tag">50% off</span>
                        <img src="@product.ImageUrl" class="product-thumb" alt="">
                        <button class="card-btn">add to wishlist</button>
                    </div>
                    <div class="product-info">
                        <h2 class="product-brand">@product.Title</h2>
                        <span class="price">@product.Variants.First().OriginalPrice</span><span class="actual-price">@product.Variants.First().Price</span>
                    </div>
                </div>
            }
        </div>
    </section>*@

@code {
    private ElementReference productContainer;
    private string CurrentTabName { get; set; } = "Most Viewed";

    protected override async Task OnInitializedAsync()
    {
        ProductService.ProductsChanged += StateHasChanged;
        ChangeTab(CurrentTabName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeSlickCarousel");
            StateHasChanged();
        }
        else
        {
            // Reinitialize the carousel every time the component updates
            await JSRuntime.InvokeVoidAsync("initializeSlickCarousel");

        }
    }

    private void ChangeTab(string tabName)
    {
        CurrentTabName = tabName;
        if (CurrentTabName == "Featured")
        {
            ProductService.GetFeaturedProducts();
        }

        if (CurrentTabName == "Most Viewed")
        {
            ProductService.GetMostViewedProducts();
        }
    }

}