@page "/cart"
@using BlazorECommerce.Client.Services.AuthService;
@using BlazorECommerce.Client.Services.OrderService;
@inject ICartService CartService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if(CartService.CartProducts == null || CartService.CartProducts.Count == 0)
{
    <span>@message</span>
}  else
{
    <div>
        @foreach (var product in CartService.CartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId>">@product.Title</a></h5>
                   @* <span>@product.ProductType</span><br />*@
                    <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" />
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(product.Variants.First().Price * product.Quantity)
                </div>

            </div>
        }

        <div class="cart-product-price">
            Total (@CartService.CartProducts.Count): $@CartService.CartProducts.Sum(product => product.Variants.First().Price * product.Quantity)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Checkout</button>

}




@code {
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        await CartService.GetCartProducts();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProduct product) 
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;

        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}
