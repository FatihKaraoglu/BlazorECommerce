@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if(product == null)
{
    <span>@message</span>
} else
{

   <div class="product-container">
       <div class="product-preview-container">
           <div class="media-wrap">
                <img src="@product.ImageUrl" class="media-img" />
                <a class="buy-btn"></a>

                <div class="product-info-container">

                    @if (product.Variants != null && product.Variants.Count > 1)
                    {

                        <div class="mb-3">
                            <select class="form-select" @bind="currentTypeId">
                                @foreach (var variant in product.Variants)
                                {
                                    <option value="@variant.ProductTypeId">@variant.ProductType.Name $@variant.Price</option>
                                }
                            </select>
                        </div>
                    }

                    <div class="rating-container-editable">
                        <div class="stars">

                            @foreach (var rating in Ratings)
                            {
                                <i class="bi @(rating.Active ? "bi-star-fill" : "bi-star") rating" @onclick="@(e => SetRating(rating.Index))"></i>
                            }
                        </div>

                        <span>
                            Rate this Product
                        </span>
                    </div>
                    <button class="btn-cart" @onclick="AddToCart">
                        <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
                    </button>
                </div>
           </div>

        </div>

       <div class="product-detail-container">
           <h3 class="product-heading">
               @product.Title
           </h3>
           <h4 class="product-author">
               Lilly Vanillie
           </h4>

            <div class="rating-container">
                    <div class="stars">

                        @foreach(var rating in Ratings)
                        {
                            <i class="bi @(rating.Active ? "bi-star-fill" : "bi-star") rating"></i>
                        }
                    </div>
                    <div class="rating-calculation-container">
                        <span class="rating-calculation">
                            4.34
                        </span>
                    </div>
                    <div class="rating-count">
                        427 Ratings
                    </div>
            </div>

            <div class="description">
                <p>
                    @product.Description
                </p>

            </div>

            <div class="genre">
                
            </div>
           
       </div>
   </div>
}

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    private List<Rating> Ratings { get; set; } = new List<Rating>
{
    new Rating { Index = 1, Active = false },
    new Rating { Index = 2, Active = false },
    new Rating { Index = 3, Active = false },
    new Rating { Index = 4, Active = false },
    new Rating { Index = 5, Active = false },

};

    public class Rating
    {
        public int Index { get; set; }
        public bool Active { get; set; }
        public bool HoverActive { get; set; } = false;
    }

    public void SetRating(int index)
    {
        // Iterate through each rating in the list
        foreach (var rating in Ratings)
        {
            // Set the Active property to true for ratings with Index less than or equal to the given index
            if (rating.Index <= index)
            {
                rating.Active = true;
            }
            else
            {
                rating.Active = false;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Product...";
        var result = await ProductService.GetProduct(Id);

        if (!result.Success)
        {
            message = result.Message;
        } else
        {
            product = result.Data;
            if(product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };

            await CartService.AddToCart(cartItem);
    }


}
